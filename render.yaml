services:
  - type: web
    name: grok-t
    env: python
    buildCommand: |
      pip install -r requirements.txt
      mkdir -p instance
      python << EOF
      from app import db, app, User, Category
      from werkzeug.security import generate_password_hash
      from datetime import datetime, timezone
      
      with app.app_context():
          try:
              db.create_all()
              print("Database tables created successfully")
              
              # Create admin user if it doesn't exist
              admin = User.query.filter_by(username='admin').first()
              if not admin:
                  admin_user = User(
                      username='admin',
                      email='admin@example.com',
                      password_hash=generate_password_hash('admin123'),
                      is_admin=True,
                      created_at=datetime.now(timezone.utc)
                  )
                  db.session.add(admin_user)
                  db.session.commit()
                  print("Admin user created")
              
              # Create default categories if they don't exist
              if Category.query.count() == 0:
                  categories = [
                      "Programming", "Data Science", "Web Development", 
                      "Mobile Development", "DevOps", "Design"
                  ]
                  for cat_name in categories:
                      category = Category(name=cat_name)
                      db.session.add(category)
                  db.session.commit()
                  print("Default categories created")
              
              print("Database initialization completed successfully")
          except Exception as e:
              print(f"Error during initialization: {str(e)}")
              raise e
      EOF
    startCommand: gunicorn app:app
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: FLASK_ENV
        value: production
      - key: FLASK_APP
        value: app.py
      - key: SECRET_KEY
        generateValue: true
      - key: DATABASE_URL
        value: sqlite:///instance/lms.db
      - key: PYTHONUNBUFFERED
        value: "true"
    disk:
      name: sqlite-data
      mountPath: /opt/render/project/src/instance
      sizeGB: 1
    healthCheckPath: /health
    autoDeploy: true
    plan: free 